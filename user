using System;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Net.Configuration;
using System.Threading;

namespace SocketTcpClient
{
    class Program
    {
        // адрес и порт сервера, к которому будем подключаться
        static int port = 8005; // порт сервера
        static string address = "127.0.0.1"; // адрес сервера
        static void Main(string[] args)
        {
            try
            {
                IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(address), port);

                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                // подключаемся к удаленному хосту
                socket.Connect(ipPoint);

                // получаем ответ
                byte[] data = new byte[256]; // буфер для ответа
                StringBuilder builder = new StringBuilder();
                int bytes = 0; // количество полученных байт

                do
                {
                    bytes = socket.Receive(data, data.Length, 0);
                    builder.Append(Encoding.Unicode.GetString(data, 0, bytes));
                }
                while (socket.Available > 0);

                // закрываем сокет
                socket.Shutdown(SocketShutdown.Both);
                socket.Close();
                Console.WriteLine("ответ сервера: " + builder.ToString());
                potok DD = new potok(builder.ToString());

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            Console.Read();
        }

        class potok
        {
            public potok(string A)
            {
                string[] ip_adresa = A.Split('&');
               

                Thread thread = new Thread(this.func);
                thread.Start(ip_adresa[1]);//передача параметра в поток
                Thread thread1 = new Thread(this.func1);
                thread1.Start(ip_adresa[0]);//передача параметра в поток
            }
            void func(object A)//Функция потока, передаем параметр
            {
                
                string[] ip_and_port = A.ToString().Split(':');
                ////////////////////////////////////
                IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(ip_and_port[0]), Convert.ToInt32(ip_and_port[1]));
                Socket listenSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                listenSocket.Bind(ipPoint);
                listenSocket.Listen(1);
                listenSocket = listenSocket.Accept();
                while (true)
                {
                    // получаем сообщение
                    StringBuilder builder = new StringBuilder();
                    int bytes = 0;
                    byte[] data = new byte[256];
                    do
                    {
                        bytes = listenSocket.Receive(data, data.Length, 0);
                        builder.Append(Encoding.Unicode.GetString(data, 0, bytes));
                    }
                    while (listenSocket.Available > 0);
                    Console.WriteLine(DateTime.Now.ToShortTimeString() + ": " + builder.ToString());
                }
            }
            void func1(object handler)//Функция потока, передаем параметр
            {
                string[] ip_and_port = handler.ToString().Split(':');
                
                IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(ip_and_port[0]), Convert.ToInt32(ip_and_port[1]));
                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                socket.Connect(ipPoint);
                while (true)
                {
                    // получаем сообщение
                    Console.Write("Введите сообщение:");
                    string message = Console.ReadLine();
                    byte[] data = Encoding.Unicode.GetBytes(message);
                    socket.Send(data);
                    Console.WriteLine(message);
                }
            }
        }
    }

}
